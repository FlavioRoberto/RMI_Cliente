/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rmi.View;

import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import javax.swing.JOptionPane;
import rmi.Interface.IControllerBase;
import rmi.Model.Funcionario;
import rmi.Model.Pessoa;
import rmi.Util.conexao_server;

/**
 *
 * @author Guilherme Wander
 */
public class View_CadastraFuncionario extends javax.swing.JInternalFrame {

    /**
     * Creates new form View_CadastraFuncionario
     */
    public View_CadastraFuncionario() {
        initComponents();
    }
    
    
    //Metodo para recuperar os valores digitados nos campos e verificar se algum campo ficou vazio
    private void valoresDosCampos() {
        String nome = TextField_Nome.getText().toString();
        String cpf = FormattedTextField_CPF.getText().toString();
        String rg = FormattedTextField_RG.getText().toString();
        String telefone = FormattedTextField_Telefone.getText().toString();
        String celular = FormattedTextField_Celular.getText().toString();
        String cargo = ComboBox_Cargo.getSelectedItem().toString();
        String especialidade = null;
        if (cargo.equals("Cargo")) {
            JOptionPane.showMessageDialog(null, "É necessário escolher um cargo!", null, JOptionPane.ERROR_MESSAGE);
        } else if (cargo.equals("Gerente")) {
            especialidade = "Gerente";
        } else if (cargo.equals("Vendedor")) {
            especialidade = "Vendedor";
        } else if (cargo.equals("Produção")) {
            especialidade = "Produção";
        }

        if (!nome.equals(null) && !cpf.equals(null) && !rg.equals(null)
                && !telefone.equals(null) && !especialidade.equals(null)) {
            if(telefone.length() < 10 || celular.length() < 11){
               JOptionPane.showMessageDialog(null, "Telefone ou celular incompletos!", null, JOptionPane.ERROR_MESSAGE); 
            }else{
                cadastraFuncionario(nome, cpf, rg, telefone, celular, especialidade, "200200");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Preencha todos os campos!", null, JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void cadastraFuncionario(String nome, String cpf, String rg, String telefone, String celular, String especialidade,
            String senha) {
        try {
            //criar objeto da interface, usa o lookpu para pegar a chave
            IControllerBase objetoRemoto = (IControllerBase) conexao_server.conexao().lookup("funcionario");
            //chama metodo do servidor
            System.out.println("Cadastrando...");

            if (validaCpf(cpf)) {
                Funcionario funcionario = new Funcionario();

                funcionario.setCpf(cpf);
                funcionario.setEspecialidade(especialidade);
                funcionario.setNome(nome);
                funcionario.setRg(rg);
                funcionario.setSalario(2000);
                funcionario.setTelefone(telefone);
                funcionario.setCelular(celular);
                funcionario.setSenha(senha);
                JOptionPane.showMessageDialog(null, objetoRemoto.create(funcionario), null, JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "CPF já está em uso!", null, JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (RemoteException e) {
            System.out.println(e.getMessage());
        } catch (NotBoundException e) {
            System.out.println(e.getMessage());
        }
    }
    
    private boolean validaCpf(String cpf) {
        boolean valida = false;
        try {
            //criar objeto da interface, usa o lookpu para pegar a chave
            IControllerBase objetoRemoto = (IControllerBase) conexao_server.conexao().lookup("pessoa");
            //chama metodo do servidor
            System.out.println("Consultando...");

            Pessoa pessoa = new Pessoa();

            pessoa = (Pessoa) objetoRemoto.findBy("cpf", cpf);

            if (pessoa.getIdPessoa() == 0) {
                valida = true;
            } else {
                valida = false;
            }

        } catch (RemoteException e) {
            System.out.println(e.getMessage());
        } catch (NotBoundException e) {
            System.out.println(e.getMessage());
        }
        return valida;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ComboBox_Cargo = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        TextField_Nome = new javax.swing.JTextField();
        FormattedTextField_RG = new javax.swing.JFormattedTextField();
        FormattedTextField_CPF = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        FormattedTextField_Telefone = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        FormattedTextField_Celular = new javax.swing.JFormattedTextField();
        Button_Cadastrar = new javax.swing.JButton();

<<<<<<< HEAD
        setClosable(true);
        setTitle("Cadastro Funcionário");
=======
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
>>>>>>> ac075cdf18db8bc92564ad2346d0b69ee69ac56e

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Cadastro Funcionário");

        ComboBox_Cargo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cargo", "Gerente", "Vendedor", "Produção" }));
        ComboBox_Cargo.setToolTipText("");

        jLabel8.setText("Nome:");

        try {
            FormattedTextField_RG.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        FormattedTextField_RG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FormattedTextField_RGActionPerformed(evt);
            }
        });

        try {
            FormattedTextField_CPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel9.setText("CPF:");

        jLabel10.setText("RG:");

        jLabel11.setText("Telefone:");

        jLabel12.setText("Especificação:");

        try {
            FormattedTextField_Telefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel2.setText("Celular:");

        try {
            FormattedTextField_Celular.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        Button_Cadastrar.setText("Cadastrar");
        Button_Cadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_CadastrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
<<<<<<< HEAD
                        .addGap(218, 218, 218)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(FormattedTextField_CPF, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(FormattedTextField_RG))
                            .addComponent(TextField_Nome, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(FormattedTextField_Telefone, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                            .addComponent(FormattedTextField_Celular)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(ComboBox_Cargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(239, 239, 239)
                        .addComponent(Button_Cadastrar)))
                .addContainerGap(80, Short.MAX_VALUE))
=======
                        .addGap(85, 85, 85)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel11))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(FormattedTextField_CPF, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel10)
                                        .addGap(18, 18, 18)
                                        .addComponent(FormattedTextField_RG, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(TextField_Nome, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(FormattedTextField_Telefone, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel12)
                                        .addGap(18, 18, 18)
                                        .addComponent(ComboBox_Cargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(60, 60, 60)))
                                .addComponent(jLabel3))
                            .addComponent(jLabel5)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(Btn_Cadastrar)))
                .addContainerGap(69, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(Label_Cadastro_de_Cliente)
                .addGap(218, 218, 218))
>>>>>>> ac075cdf18db8bc92564ad2346d0b69ee69ac56e
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
<<<<<<< HEAD
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(TextField_Nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(FormattedTextField_CPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(FormattedTextField_RG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(FormattedTextField_Telefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(FormattedTextField_Celular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(ComboBox_Cargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Button_Cadastrar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
=======
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(150, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(115, 115, 115))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Label_Cadastro_de_Cliente)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextField_Nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FormattedTextField_CPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FormattedTextField_RG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)
                            .addComponent(FormattedTextField_Telefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboBox_Cargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addComponent(Btn_Cadastrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)))
                .addComponent(jLabel5)
                .addGap(0, 0, Short.MAX_VALUE))
>>>>>>> ac075cdf18db8bc92564ad2346d0b69ee69ac56e
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void FormattedTextField_RGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FormattedTextField_RGActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FormattedTextField_RGActionPerformed

    private void Button_CadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_CadastrarActionPerformed
        valoresDosCampos();
<<<<<<< HEAD
    }//GEN-LAST:event_Button_CadastrarActionPerformed
=======
    }//GEN-LAST:event_Btn_CadastrarActionPerformed

    //Metodo para recuperar os valores digitados nos campos e verificar se algum campo ficou vazio
    private void valoresDosCampos() {
        String nome = TextField_Nome.getText().toString();
        String cpf = FormattedTextField_CPF.getText().toString();
        String rg = FormattedTextField_RG.getText().toString();
        String telefone = FormattedTextField_Telefone.getText().toString();
        String cargo = ComboBox_Cargo.getSelectedItem().toString();
        String especialidade = null;
        if (cargo.equals("Cargo")) {
            JOptionPane.showMessageDialog(null, "É necessário escolher um cargo!", null, JOptionPane.ERROR_MESSAGE);
        } else if (cargo.equals("Gerente")) {
            especialidade = "Gerente";
        } else if (cargo.equals("Vendedor")) {
            especialidade = "Vendedor";
        } else if (cargo.equals("Produção")) {
            especialidade = "Produção";
        }
<<<<<<< HEAD

        if (!nome.equals(null) && !cpf.equals(null) && !rg.equals(null)
                && !telefone.equals(null) && !especialidade.equals(null)) {
            cadastraFuncionario(nome, cpf, rg, telefone, especialidade, "200200");
        } else {
            JOptionPane.showMessageDialog(null, "Preencha todos os campos!", null, JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cadastraFuncionario(String nome, String cpf, String rg, String telefone, String especialidade,
            String senha) {
        try {
=======
        
        if(!nome.equals(null) && !cpf.equals(null) && !rg.equals(null) && 
                !telefone.equals(null) && !especialidade.equals(null)){
            cadastraFuncionario(nome, cpf, rg, telefone, especialidade, "200200");
        }else{
            JOptionPane.showMessageDialog(null, "Preencha todos os campos!", null,JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void cadastraFuncionario(String nome, String cpf, String rg, String telefone, String especialidade
            , String senha){
        try{
>>>>>>> 32bb49736aca22440f27ecf640603e5f8caf2148
            //criar objeto da interface, usa o lookpu para pegar a chave
            IControllerBase objetoRemoto = (IControllerBase) conexao_server.conexao().lookup("funcionario");
            //chama metodo do servidor
            System.out.println("Cadastrando...");
<<<<<<< HEAD

            if (validaCpf(cpf)) {
                Funcionario funcionario = new Funcionario();

                funcionario.setCpf(cpf);
                funcionario.setEspecialidade(especialidade);
                funcionario.setNome(nome);
                funcionario.setRg(rg);
                funcionario.setSalario(2000);
                funcionario.setTelefone(telefone);
                funcionario.setSenha(senha);
                JOptionPane.showMessageDialog(null, objetoRemoto.create(funcionario), null, JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "CPF já está em uso!", null, JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (RemoteException e) {
            System.out.println(e.getMessage());
        } catch (NotBoundException e) {
=======
            
            Funcionario funcionario = new Funcionario();
            
            funcionario.setCpf(cpf);
            funcionario.setEspecialidade(especialidade);
            funcionario.setNome(nome);
            funcionario.setRg(rg);
            funcionario.setSalario(2000);
            funcionario.setTelefone(telefone);
            funcionario.setSenha(senha);
            JOptionPane.showMessageDialog(null, objetoRemoto.create(funcionario), null,JOptionPane.INFORMATION_MESSAGE);
                        
        }catch(RemoteException e){
>>>>>>> 32bb49736aca22440f27ecf640603e5f8caf2148
            System.out.println(e.getMessage());
        }
    }

    private boolean validaCpf(String cpf) {
        boolean valida = false;
        try {
            //criar objeto da interface, usa o lookpu para pegar a chave
            IControllerBase objetoRemoto = (IControllerBase) conexao_server.conexao().lookup("pessoa");
            //chama metodo do servidor
            System.out.println("Consultando...");

            Pessoa pessoa = new Pessoa();

            pessoa = (Pessoa) objetoRemoto.findBy("cpf", cpf);

            if (pessoa.getIdPessoa() == 0) {
                valida = true;
            } else {
                valida = false;
            }

        } catch (RemoteException e) {
            System.out.println(e.getMessage());
        } catch (NotBoundException e) {
            System.out.println(e.getMessage());
        }
        return valida;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View_CadastraFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View_CadastraFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View_CadastraFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View_CadastraFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
>>>>>>> ac075cdf18db8bc92564ad2346d0b69ee69ac56e


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_Cadastrar;
    private javax.swing.JComboBox ComboBox_Cargo;
    private javax.swing.JFormattedTextField FormattedTextField_CPF;
    private javax.swing.JFormattedTextField FormattedTextField_Celular;
    private javax.swing.JFormattedTextField FormattedTextField_RG;
    private javax.swing.JFormattedTextField FormattedTextField_Telefone;
    private javax.swing.JTextField TextField_Nome;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
