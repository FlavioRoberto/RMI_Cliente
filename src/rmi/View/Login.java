/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rmi.View;

import java.awt.event.WindowEvent;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import rmi.Interface.IControllerBase;
import rmi.Model.Cliente;
import rmi.Model.Funcionario;
import rmi.Model.Pessoa;
import rmi.Util.conexao_server;

/**
 *
 * @author Bruno
 */
public class Login extends javax.swing.JFrame {

    /**
     * Creates new form Login
     */   
<<<<<<< HEAD
    
    public static int IDFUNCIONARIO;
    
=======
>>>>>>> 32bb49736aca22440f27ecf640603e5f8caf2148
    public Login() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Button_Acessar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        FormattedTextField_Cpf = new javax.swing.JFormattedTextField();
        PasswordField_Senha = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Login");
<<<<<<< HEAD
=======
        setAlwaysOnTop(true);
>>>>>>> 32bb49736aca22440f27ecf640603e5f8caf2148
        setAutoRequestFocus(false);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Login");
        jLabel1.setName(""); // NOI18N

        Button_Acessar.setText("Acessar");
        Button_Acessar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_AcessarActionPerformed(evt);
            }
        });

        jLabel2.setText("Cpf:");

        jLabel3.setText("Senha:");

        try {
            FormattedTextField_Cpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(FormattedTextField_Cpf, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(PasswordField_Senha)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(Button_Acessar)))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(FormattedTextField_Cpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(PasswordField_Senha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(Button_Acessar)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void Button_AcessarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_AcessarActionPerformed
        valoresDosCampos();
    }//GEN-LAST:event_Button_AcessarActionPerformed

    private void valoresDosCampos(){
        String cpf = FormattedTextField_Cpf.getText().toString();
        String senha = PasswordField_Senha.getText().toString();
        if(!cpf.equals("") && !senha.equals("")){
            verificaCredencial(cpf, senha);
        }else{
            JOptionPane.showMessageDialog(null, "Preencha todos os campos!", null,
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void verificaCredencial(String cpf, String senha){
        try{
            //criar objeto da interface, usa o lookpu para pegar a chave
            IControllerBase objetoRemoto =(IControllerBase)conexao_server.conexao().lookup("pessoa");
            //chama metodo do servidor
            System.out.println("Consultando...");
            Pessoa pessoa = new Pessoa();
            pessoa = (Pessoa) objetoRemoto.findBy("cpf", cpf);
            if(!pessoa.getCpf().equals("0")){
                //JOptionPane.showMessageDialog(null, pessoa.getNome(), null,JOptionPane.INFORMATION_MESSAGE);
                pesquisaFuncionario(pessoa.getIdPessoa(), senha);
            }else{
                JOptionPane.showMessageDialog(null, "CPF não encontrado!", null,JOptionPane.ERROR_MESSAGE);
            }
                         
        }catch(RemoteException e){
            System.out.println(e.getMessage());
        }catch(NotBoundException e){
            System.out.println(e.getMessage());
        } 
    }
    
    private void pesquisaFuncionario(int idPessoa, String senha){
        try{
            //criar objeto da interface, usa o lookpu para pegar a chave
            IControllerBase objetoRemoto =(IControllerBase)conexao_server.conexao().lookup("funcionario");
            //chama metodo do servidor
            System.out.println("Consultando...");
            Funcionario funcionario = new Funcionario();
            funcionario = (Funcionario) objetoRemoto.findBy("Pessoa_idPessoa", idPessoa);
            Login telaLogin = new Login(); 
            
            if(funcionario.getIdFuncionario() != 0){
                if(funcionario.getSenha().equals(senha)){
                    if(funcionario.getEspecialidade().equals("Vendedor")){
<<<<<<< HEAD
                        //recebe o idFuncionario
                        IDFUNCIONARIO = funcionario.getIdFuncionario();
=======
>>>>>>> 32bb49736aca22440f27ecf640603e5f8caf2148
                        //acessa tela do vendedor
                        View_Vendedor view = new View_Vendedor();
                        view.setVisible(true);
                        dispose();
                    }else if(funcionario.getEspecialidade().equals("Produção")){
                        //acessa tela da produção
                        View_Producao view = new View_Producao();
                        view.setVisible(true);
                        dispose();
                    }else if(funcionario.getEspecialidade().equals("Gerente")){
                        //acessa tela do gerente
                        View_Gerente view = new View_Gerente();
                        view.setVisible(true);
                        dispose();
                    }else{
                       JOptionPane.showMessageDialog(null, "CPF não corresponde à um funcionário!"
                               , null,JOptionPane.ERROR_MESSAGE); 
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Senha inválida!", null,JOptionPane.ERROR_MESSAGE);
                }
            }else{
                JOptionPane.showMessageDialog(null, "CPF não encontrado!", null,JOptionPane.ERROR_MESSAGE);
            }
                         
        }catch(RemoteException e){
            System.out.println(e.getMessage());
        }catch(NotBoundException e){
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_Acessar;
    private javax.swing.JFormattedTextField FormattedTextField_Cpf;
    private javax.swing.JPasswordField PasswordField_Senha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
